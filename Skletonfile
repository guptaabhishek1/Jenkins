pipeline {
    agent any

    stages {

        stage('Parallel Infra Stage') {
            steps {
                parallel(
                        "Build RMQ":
                        {
                            script {
                                try {
                                    buildRMQ()
                                    echo 'RMQ is UP like'

                            } catch (e) {
                                //getFailnote()
                                
                                //FailureSlackNotification
                                message = "RMQ build Failed"
                                color_code = "#00FF00"
                                username = "Test"
                                slackchannel = "#test"
                                slackNotification(message, color_code, username, slackchannel)
                                
                                error("KK_Build failed because this step isn't implemented...")

                                }
                            }
                        },
                        "Build HZ":
                        {
                            script {
                                try {
                                    buildHazelCastInfra()
                            } catch (e) {
                                    //getFailnote()
                                    
                                    //FailureSlackNotification 
                                    message = "HazelCast Build Failed"
                                    color_code = "#00FF00"
                                    username = "Test"
                                    slackchannel = "#test"
                                    slackNotification(message, color_code, username, slackchannel)
                                    
                                    error("KK_Build failed HZ...")

                                    }
                            }

                        }
                ) // End Parallel Infrastructure execution
            }
        }
        
        stage('Send notification') {
            steps {
                script {
                        // Slack Notification
                        message = "Infrastructure Up"
                        color_code = "#00FF00"
                        username = "Test"
                        slackchannel = "#test"
                    }
                    
                    slackNotification(message, color_code, username, slackchannel)
                    //getNotified()
            }

        }
        
        // This is waiting for user Input before staring application deploy stage
        stage('Wait for User Input') {
            steps {
                script {
                    User_Input_message = input message: 'User input required to Proceed/Abort',
                        parameters: [choice(name: 'Click Proceed or Abort', choices: 'no\nyes', description: 'Choose "yes" if you want to deploy this build')]
            
                }
            }
        }
        
        stage('Parallel App stage') {
            steps {
                
                parallel(
                    "buildCAModelScore":
                    {
                        script{
                            try {
                                echo "CAMModelScore does not run in dev"
                                buildCAModelScore()
                            }catch (e) {
                                echo "${BUILD_URL}"
                                echo "buildCAModelScore Failed but job needs to be set to success"
                            }
                            
                        }
                           
                     },
                    "Build Decision Handler": // Building DH APP
                    {
                        script{
                            try {
                                echo "buildDecisionHandler"
                                //buildDecisionHandler()
                             }catch (e) {
                                echo "buildCAModelScore Failed but job needs to be set to success"
                            }   
                    },
                    "Build FRE": //Building FRE APP
                    {
                        script{
                            try {
                                echo "buildFraudRulesEngine"
                                //buildFraudRulesEngine()
                            }catch (e) {
                                echo "buildCAModelScore Failed but job needs to be set to success"
                            }
                     },
                     "USModelScore job": //Building USMS
                     {
                            echo "buildUSModelScore"
                            //buildUSModelScore()
                     }
                ) // End Parallel App

                }
           }
 }
}

// Email Notification function
def getNotified(){

emailext body: '''"""<p>Success!! building INFRA HZ & RMQ: Job \'${JOB_NAME} [${BUILD_NUMBER}]\':</p>
                   <p>Check console output at "<a href="${BUILD_URL}">${JOB_NAME} [${BUILD_NUMBER}]</a>"</p>
                   <p>RabbitMQConsole at "<a href="${ip}"":15672"</a>"   """,''',
           subject: '"Success!! building INFRA HZ & RMQ: Job \'${JOB_NAME} [${BUILD_NUMBER}]\'"',
           to: "${buildUserEmail}"

}

// Email Notification
def getFailnote(){
    // def mailRecipients =  "${BUILD_USER_EMAIL}"
    emailext body: '''"""<p>Failed building INFRA HZ & RMQ: Job \'${JOB_NAME} [${BUILD_NUMBER}]\':</p>
                   <p>Check console output at "<a href="${BUILD_URL}">${JOB_NAME} [${BUILD_NUMBER}]</a>"</p>""",''',
           subject:'"Failed building INFRA HZ & RMQ: Job \'${JOB_NAME} [${BUILD_NUMBER}]\'"',
           to: "${buildUserEmail}"
}

// getSlackNotification
def slackNotification(message, color_code, username, slackchannel)
{
   sh "sh slackStatus.sh \"${message}\" \"${color_code}\" \"${username}\" \"${slackchannel}\""
}

//Failure getSlackNotification
def FailureSlackNotification(){
   echo "${workspace}"
   echo "${pwd}"
   sh "./slackstatus.sh"
}

def buildRMQ() {
       build job: 'TestPipeline2', parameters:
       [
            string(name: 'Enviroment', value: "${env.Enviroment}"),
            string(name: 'Test', value: "${env.Test}"),
            string(name: 'userid', value: "${env.userid}")
       ]

}

def buildHazelCastInfra() {
       build job: 'TestPipeline3', parameters:
       [
            string(name: 'Enviroment', value: "${env.Enviroment}"),
            string(name: 'Test', value: "${env.Test}"),
            string(name: 'userid', value: "${env.userid}")
       ]

}

def buildCAModelScore() {
       
       build job: 'TestPipeline1', parameters:
       [
            string(name: 'Deployment_Location', value: "${env.Enviroment},${env.AZ}"),
            string(name: 'TargetCluster_Deployment', value: "${env.TargetCluster_Deployment}"),
            string(name: 'Cluster_Type', value: "${env.Cluster_Type}"),
            string(name: 'AZ', value: "${env.MultiAZ}")
       ]

}

