pipeline {
    agent any

    stages {

        stage('Parallel Infra Stage') {
            steps {
                parallel(
                        "Build RMQ":
                        {
                            script {
                                try {
                                    buildRMQ()
                                    echo 'RMQ is UP like'

                            } catch (e) {
                                //getFailnote()
                                //FailureSlackNotification()
                                error("KK_Build failed because this step isn't implemented...")

                                }
                            }
                        },
                        "Build HZ":
                        {
                            script {
                                try {
                                    buildHazelCastInfra()
                            } catch (e) {
                                    //getFailnote()
                                    //FailureSlackNotification()
                                    error("KK_Build failed HZ...")

                                    }
                            }

                        }
                ) // End Parallel Infrastructure execution
            }
        }
        
        stage('Send notification') {
            steps {
                def Build_Wait_Input = input message: 'User input required to proceed with build',
                    parameters: [choice(name: 'Build_Wait_Input', choices: 'no\nyes', description: 'Choose "yes" if you want to deploy this build')]

                wrap([$class: 'BuildUser']) {
                    echo "${BUILD_USER}"
                    echo "${BUILD_USER_ID}"
                    echo "${BUILD_USER_EMAIL}"
                    slackNotification()
                    getNotified()
                }
            }

        }
 }
}

// Email Notification function
def getNotified(){

emailext body: '''"""<p>Success!! building INFRA HZ & RMQ: Job \'${JOB_NAME} [${BUILD_NUMBER}]\':</p>
                   <p>Check console output at "<a href="${BUILD_URL}">${JOB_NAME} [${BUILD_NUMBER}]</a>"</p>
                   <p>RabbitMQConsole at "<a href="${ip}"":15672"</a>"   """,''',
           subject: '"Success!! building INFRA HZ & RMQ: Job \'${JOB_NAME} [${BUILD_NUMBER}]\'"',
           to: "${buildUserEmail}"

}

// Email Notification
def getFailnote(){
    // def mailRecipients =  "${BUILD_USER_EMAIL}"
    emailext body: '''"""<p>Failed building INFRA HZ & RMQ: Job \'${JOB_NAME} [${BUILD_NUMBER}]\':</p>
                   <p>Check console output at "<a href="${BUILD_URL}">${JOB_NAME} [${BUILD_NUMBER}]</a>"</p>""",''',
           subject:'"Failed building INFRA HZ & RMQ: Job \'${JOB_NAME} [${BUILD_NUMBER}]\'"',
           to: "${buildUserEmail}"
}

// getSlackNotification
def slackNotification(){
   sh "slackstatus.sh"
}

//Failure getSlackNotification
def FailureSlackNotification(){
   echo "${workspace}"
   echo "${pwd}"
   sh "./slackstatus.sh"
}

def buildRMQ() {
       build job: 'TestPipeline2', parameters:
       [
            string(name: 'Enviroment', value: "${env.Enviroment}"),
            string(name: 'Test', value: "${env.Test}"),
            string(name: 'userid', value: "${env.userid}")
       ]

}

def buildHazelCastInfra() {
       build job: 'TestPipeline3', parameters:
       [
            string(name: 'Enviroment', value: "${env.Enviroment}"),
            string(name: 'Test', value: "${env.Test}"),
            string(name: 'userid', value: "${env.userid}")
       ]

}

